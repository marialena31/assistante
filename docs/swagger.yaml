openapi: 3.0.0
info:
  title: Maria-Lena Pietri Portfolio API
  description: |
    API documentation for Maria-Lena Pietri's portfolio website.
    
    Important Notes:
    - All database tables are in the 'api' schema for security
    - The schema is configured in the Supabase client options
    - Database operations must use proper typing with the Database type
    - Authentication uses @supabase/ssr with PKCE flow
    - All server-side code MUST use getUser() for token validation
    - NEVER use getSession() in server-side code
    - Only @marialena-pietri.fr email domains are allowed
    - All protected routes require valid authentication
  version: 1.0.0
  contact:
    name: Maria-Lena Pietri
    url: https://marialena-pietri.fr

servers:
  - url: https://marialena-pietri.fr/api
    description: Production server
  - url: http://localhost:3000/api
    description: Local development server

components:
  securitySchemes:
    SupabaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Supabase JWT token. Server-side validation is done using getUser().
        NEVER use getSession() in server-side code.

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
        code:
          type: string
          description: Error code

    Content:
      type: object
      properties:
        id:
          type: string
          format: uuid
        slug:
          type: string
        title:
          type: string
        content:
          type: object
        type:
          type: string
          enum: [page, section, component]
        updatedAt:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        slug:
          type: string
        excerpt:
          type: string
        content:
          type: string
        status:
          type: string
          enum: [draft, published, scheduled]
        category:
          type: string

    ContactMessage:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        message:
          type: string
      required:
        - name
        - email
        - message

    BlogPost:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        slug:
          type: string
        content:
          type: string
        excerpt:
          type: string
          nullable: true
        featured_image:
          type: string
          nullable: true
        status:
          type: string
          enum: [draft, published]
        author:
          type: string
          format: uuid
          nullable: true
          description: UUID reference to auth.users(id)
        published_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        seo:
          type: object
          nullable: true
          properties:
            title:
              type: string
              nullable: true
            description:
              type: string
              nullable: true
            keywords:
              type: array
              items:
                type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/BlogCategory'
        blog_posts_categories:
          type: array
          items:
            $ref: '#/components/schemas/BlogPostCategory'

    BlogCategory:
      type: object
      required:
        - name
        - slug
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    BlogPostArray:
      type: array
      items:
        $ref: '#/components/schemas/BlogPost'

    NewsletterSubscription:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        is_active:
          type: boolean
          default: true
        source:
          type: string
          enum: [modal, footer]
          description: Source of the subscription (modal popup or footer form)
        has_promo:
          type: boolean
          description: Whether this subscription is eligible for promo code
        promo_code:
          type: string
          description: Unique promo code if subscription came from modal
        created_at:
          type: string
          format: date-time
      required:
        - email
        - source
        - has_promo

    NewsletterSubscriptionInput:
      type: object
      properties:
        email:
          type: string
          format: email
        source:
          type: string
          enum: [modal, footer]
        has_promo:
          type: boolean
      required:
        - email
        - source
        - has_promo

    AppointmentSettings:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        photo_url:
          type: string
        google_calendar_sync_url:
          type: string
        email_reminder_enabled:
          type: boolean
        sms_reminder_enabled:
          type: boolean
        email_reminder_template:
          type: string
        sms_reminder_template:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    AppointmentDuration:
      type: object
      properties:
        id:
          type: string
          format: uuid
        duration_minutes:
          type: integer
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    AppointmentPurpose:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Appointment:
      type: object
      required:
        - first_name
        - last_name
        - company_name
        - email
        - purpose_id
        - appointment_type
        - appointment_date
        - duration_minutes
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        company_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        purpose_id:
          type: string
          format: uuid
        message:
          type: string
          maxLength: 2000
        appointment_type:
          type: string
          enum: [phone, video, in_person]
        appointment_date:
          type: string
          format: date-time
        duration_minutes:
          type: integer
        reminders_enabled:
          type: boolean
        status:
          type: string
          enum: [confirmed, cancelled, modified]
        google_calendar_event_id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    AvailabilitySlot:
      type: object
      properties:
        id:
          type: string
          format: uuid
        day_of_week:
          type: integer
          minimum: 0
          maximum: 6
        start_time:
          type: string
          format: time
        end_time:
          type: string
          format: time
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    TimeSlot:
      type: object
      properties:
        start:
          type: string
          format: time
        end:
          type: string
          format: time
        available:
          type: boolean

    AppointmentCreate:
      type: object
      required:
        - first_name
        - last_name
        - company_name
        - email
        - purpose_id
        - appointment_type
        - appointment_date
        - duration_minutes
      properties:
        first_name:
          type: string
        last_name:
          type: string
        company_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        purpose_id:
          type: string
          format: uuid
        message:
          type: string
          maxLength: 2000
        appointment_type:
          type: string
          enum: [phone, video, in_person]
        appointment_date:
          type: string
          format: date-time
        duration_minutes:
          type: integer
        reminders_enabled:
          type: boolean

    AppointmentUpdate:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        company_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        purpose_id:
          type: string
          format: uuid
        message:
          type: string
          maxLength: 2000
        appointment_type:
          type: string
          enum: [phone, video, in_person]
        appointment_date:
          type: string
          format: date-time
        duration_minutes:
          type: integer
        reminders_enabled:
          type: boolean
        status:
          type: string
          enum: [confirmed, cancelled, modified]

paths:
  /auth-mlp2024/signin:
    post:
      summary: Sign in with email and password
      description: |
        Authenticate user with email and password.
        Only @marialena-pietri.fr email domains are allowed.
        Uses PKCE flow for enhanced security.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  pattern: '@marialena-pietri.fr$'
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successfully authenticated
        '401':
          description: Invalid credentials
        '403':
          description: Not an authorized email domain

  /auth-mlp2024/register:
    post:
      summary: Register new user
      description: |
        Register a new user account.
        Only @marialena-pietri.fr email domains are allowed.
        Uses PKCE flow for enhanced security.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  pattern: '@marialena-pietri.fr$'
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successfully registered
        '400':
          description: Invalid input
        '403':
          description: Not an authorized email domain
        '409':
          description: Email already exists

  /auth-mlp2024/reset:
    post:
      summary: Request password reset
      description: |
        Request a password reset email.
        Only @marialena-pietri.fr email domains are allowed.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  pattern: '@marialena-pietri.fr$'
      responses:
        '200':
          description: Reset email sent
        '404':
          description: User not found
        '403':
          description: Not an authorized email domain

  /auth-mlp2024/callback:
    get:
      summary: Auth callback handler
      description: |
        Handle authentication callbacks (email confirmation, password reset).
        Uses PKCE flow and verifies session with getUser().
      tags:
        - Authentication
      parameters:
        - in: query
          name: token_hash
          schema:
            type: string
          description: Authentication token hash
        - in: query
          name: type
          schema:
            type: string
            enum: [signup, recovery]
          description: Callback type
        - in: query
          name: returnUrl
          schema:
            type: string
          description: URL to redirect after successful auth
      responses:
        '302':
          description: Redirect to appropriate page
        '400':
          description: Invalid token

  /secure-dashboard-mlp2024:
    get:
      summary: Admin dashboard
      description: |
        Access admin dashboard.
        Protected by middleware using getUser() verification.
      tags:
        - Admin
      security:
        - SupabaseAuth: []
      responses:
        '200':
          description: Dashboard rendered
        '401':
          description: Not authenticated
        '403':
          description: Not authorized (non-admin user)

  /contents/{slug}:
    get:
      summary: Get content by slug
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Content found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Content'
        '404':
          description: Content not found

    put:
      summary: Update content
      security:
        - SupabaseAuth: []
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content'
      responses:
        '200':
          description: Content updated
        '403':
          description: Unauthorized
        '404':
          description: Content not found

  /posts:
    get:
      summary: List posts
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Posts retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      pages:
                        type: integer
                      current:
                        type: integer

    post:
      summary: Create post
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created
        '403':
          description: Unauthorized

  /posts/{id}:
    get:
      summary: Get post by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found

    put:
      summary: Update post
      security:
        - SupabaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: Post updated
        '403':
          description: Unauthorized
        '404':
          description: Post not found

    delete:
      summary: Delete post
      security:
        - SupabaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Post deleted
        '403':
          description: Unauthorized
        '404':
          description: Post not found

  /contact:
    post:
      summary: Submit contact form
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactMessage'
      responses:
        '200':
          description: Message sent
        '400':
          description: Invalid input
        '429':
          description: Too many requests

  /api/blog/import:
    post:
      summary: Import blog posts with categories
      description: Import multiple blog posts. Categories will be automatically created if they don't exist.
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BlogPost'
      responses:
        '200':
          description: Posts imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - Invalid email domain

  /api/blog/upload-image:
    post:
      summary: Upload blog post image
      tags:
        - Blog
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file (max 10MB, supported formats - jpg, png, webp)
      responses:
        '200':
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                    description: The filename to use for referencing the image
        '400':
          description: No image provided or invalid image
        '413':
          description: Image too large (max 10MB)
        '500':
          description: Server error during upload or processing

  /api/blog/posts:
    get:
      summary: List blog posts
      tags:
        - Blog
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, scheduled]
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of blog posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogPost'

  /api/newsletter/subscribe:
    post:
      summary: Subscribe to newsletter
      description: Subscribe to newsletter with optional promo code for modal subscriptions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsletterSubscriptionInput'
      responses:
        '200':
          description: Successfully subscribed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  promo_code:
                    type: string
                    description: Promo code if subscription was from modal
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already subscribed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/newsletter/unsubscribe:
    post:
      summary: Unsubscribe from newsletter
      tags:
        - Newsletter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: Successfully unsubscribed
        '404':
          description: Email not found
        '500':
          description: Server error

  /api/newsletter/subscriptions:
    get:
      summary: Get all newsletter subscriptions
      tags:
        - Newsletter
      security:
        - SupabaseAuth: []
      responses:
        '200':
          description: List of subscriptions
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        email:
                          type: string
                        created_at:
                          type: string
                          format: date-time
                        categories:
                          type: array
                          items:
                            type: string
                        promo_code_used:
                          type: boolean
                        is_deleted:
                          type: boolean
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /appointments/settings:
    get:
      summary: Get appointment settings
      tags:
        - Appointments
      security:
        - SupabaseAuth: []
      responses:
        '200':
          description: Appointment settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentSettings'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update appointment settings
      tags:
        - Appointments
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentSettings'
      responses:
        '200':
          description: Appointment settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentSettings'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /appointments/durations:
    get:
      summary: Get available appointment durations
      tags:
        - Appointments
      security:
        - SupabaseAuth: []
      responses:
        '200':
          description: List of available appointment durations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentDuration'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create new appointment duration
      tags:
        - Appointments
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentDuration'
      responses:
        '201':
          description: Appointment duration created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentDuration'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update appointment duration
      tags:
        - Appointments
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentDuration'
      responses:
        '200':
          description: Appointment duration updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentDuration'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete appointment duration
      tags:
        - Appointments
      security:
        - SupabaseAuth: []
      responses:
        '204':
          description: Appointment duration deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Appointment duration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /appointments/purposes:
    get:
      summary: Get available appointment purposes
      tags:
        - Appointments
      security:
        - SupabaseAuth: []
      responses:
        '200':
          description: List of available appointment purposes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppointmentPurpose'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create new appointment purpose
      tags:
        - Appointments
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentPurpose'
      responses:
        '201':
          description: Appointment purpose created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentPurpose'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /appointments/availability:
    get:
      summary: Get available time slots
      tags:
        - Appointments
      parameters:
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: duration
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailabilitySlot'

  /appointments:
    get:
      summary: Get all appointments
      security:
        - SupabaseAuth: []
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create new appointment
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentCreate'
      responses:
        '201':
          description: Appointment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /appointments/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get appointment by ID
      security:
        - SupabaseAuth: []
      responses:
        '200':
          description: Appointment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Appointment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update appointment
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentUpdate'
      responses:
        '200':
          description: Appointment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Appointment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete appointment
      security:
        - SupabaseAuth: []
      responses:
        '204':
          description: Appointment deleted
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Appointment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/appointments:
    get:
      summary: List all appointments
      tags:
        - Admin
        - Appointments
      security:
        - SupabaseAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [confirmed, cancelled, modified]
        - name: from_date
          in: query
          schema:
            type: string
            format: date
        - name: to_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'

  /admin/appointments/{id}:
    put:
      summary: Update appointment status
      tags:
        - Admin
        - Appointments
      security:
        - SupabaseAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [confirmed, cancelled, modified]
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'

  /admin/settings:
    put:
      summary: Update appointment settings
      tags:
        - Admin
        - Appointments
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentSettings'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentSettings'

  /admin/availability:
    put:
      summary: Update availability slots
      tags:
        - Admin
        - Appointments
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AvailabilitySlot'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailabilitySlot'

  /blog:
    get:
      summary: List all blog posts
      security:
        - SupabaseAuth: []
      responses:
        '200':
          description: List of blog posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogPost'
        '401':
          description: Unauthorized

    post:
      summary: Create a new blog post
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
      responses:
        '201':
          description: Blog post created
        '401':
          description: Unauthorized
        '422':
          description: Validation error

  /blog/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get a blog post by ID
      security:
        - SupabaseAuth: []
      responses:
        '200':
          description: Blog post found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '404':
          description: Blog post not found

    put:
      summary: Update a blog post
      security:
        - SupabaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
      responses:
        '200':
          description: Blog post updated
        '401':
          description: Unauthorized
        '404':
          description: Blog post not found

    delete:
      summary: Delete a blog post
      security:
        - SupabaseAuth: []
      responses:
        '204':
          description: Blog post deleted
        '401':
          description: Unauthorized
        '404':
          description: Blog post not found

  /appointments/available-slots:
    get:
      summary: Get available time slots for a specific date
      parameters:
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of available time slots
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimeSlot'
        '400':
          description: Invalid date format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

security:
  - SupabaseAuth: []
